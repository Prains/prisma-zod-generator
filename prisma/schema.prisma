generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator zod {
  provider          = "node ./lib/generator.js"
  output            = "./generated"
  isGenerateSelect  = true
  isGenerateInclude = true
}

model User {
  id    Int     @id @default(autoincrement())
  /// @zod.email().toLowerCase()
  email String  @unique
  /// @zod.min(2).max(50).trim()
  name  String?
  posts Post[]
  books Book[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// @zod.min(1, "Title is required").max(100, "Title too long")
  title     String
  /// @zod.max(5000).optional()
  content   String?
  published Boolean  @default(false)
  /// @zod.min(0).max(999999)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  likes     BigInt
  bytes     Bytes
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  /// @zod.min(1, "Name is required").max(100, "Name too long")
  price       Float   /// @zod.positive("Price must be positive").max(999999.99)
  description String? /// @zod.max(1000, "Description too long").optional()
  sku         String  @unique /// @zod.regex(/^[A-Z0-9-]+$/, "Invalid SKU format")
  weight      Float?  /// @zod.positive().multipleOf(0.01, "Weight precision error")
}

/// @@Gen.model(hide: true)
model Book {
  id       Int    @unique
  title    String
  author   User?  @relation(fields: [authorId], references: [id])
  authorId Int?
}

model Map {
  key   String @id
  value String
}
